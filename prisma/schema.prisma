generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("DATABASE_URL")
}

model Conta {
    id           Int           @id @default(autoincrement())
    codigo       Int?
    nome         String?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    deletedAt    DateTime?
    usuarios     Usuario[]
    imobiliarias Imobiliaria[]
    tokens       ApiToken[]
    contratos    Contrato[]
    imoveis      Imovel[]
    boletos      Boleto[]
    chamados     Chamado[]
    Extrato      Extrato[]
    Recibo       Recibo[]
}

model Usuario {
    id                    Int                      @id @default(autoincrement())
    nome                  String?                  @db.VarChar(255)
    email                 String?
    documento             String
    telefone              String?
    celular               String?
    whatsapp              String?
    naoEnviarWhatsapp     Boolean?                 @default(false)
    profissao             String?
    senhaHash             String?
    cep                   String?
    endereco              String?
    numero                String?
    bairro                String?
    cidade                String?
    estado                String?
    status                Boolean                  @default(true)
    createdAt             DateTime                 @default(now())
    updatedAt             DateTime                 @updatedAt
    deletedAt             DateTime?
    cargos                Cargo[]
    permissoes            Permissao[]
    tokens                Token[]
    contratosProprietario Contrato[]               @relation("Proprietarios")
    contratosInquilino    Contrato[]               @relation("Inquilinos")
    imoveis               ProprietariosOnImoveis[]
    apiToken              ApiToken[]
    boletos               Boleto[]
    contratosFiador       Contrato[]               @relation("Fiadores")
    Extrato               Extrato[]
    interacoesChamado     InteracaoChamado[]
    conversas             ConversaChamado[]
    conversasCriador      ConversaChamado[]        @relation("CriadorConversa")
    Anexo                 Anexo[]                  @relation("Usuario")
    hashsRecuperacao      RecuperarSenha[]
    Recibo                Recibo[]
    modulos               Modulo[]
    imobiliaria           Imobiliaria?             @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId         Int?
    conta                 Conta?                   @relation(fields: [contaId], references: [id])
    contaId               Int?
    FichaCadastral        FichaCadastral[]
    chamadorCriados       Chamado[]                @relation("CriadorChamado")
    chamadosResponsavel   Chamado[]                @relation("ResponsavelChamados")
    ChamadosParticipante  Chamado[]                @relation("ParticipantesChamado")
    tarefasResponsavel    Tarefa[]                 @relation("ResponsaveisTarefa")
    tarefasMembro         Tarefa[]                 @relation("MembrosTarefa")
    HistoricoChamado      HistoricoChamado[]
    Orcamento             Orcamento[]
    DepartamentoChamado   DepartamentoChamado[]
    Tarefa                Tarefa[]
    Notificacao           Notificacao[]
    anexosPermitidos      Anexo[]                  @relation("AnexosPermitidos")
    Historico             Historico[]
    Processo              Processo[]

    @@unique([imobiliariaId, documento])
}

model RecuperarSenha {
    id        String    @id @default(uuid())
    hash      String    @default(uuid())
    utilizado Boolean   @default(false)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    usuario   Usuario   @relation(fields: [usuarioId], references: [id])
    usuarioId Int
}

model ApiToken {
    id        Int       @id @default(autoincrement())
    token     String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    usuario   Usuario[]
    conta     Conta?    @relation(fields: [contaId], references: [id])
    contaId   Int?
}

model Cargo {
    id        Int       @id @default(autoincrement())
    codigo    String?   @unique
    nome      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    usuarios  Usuario[]
    modulos   Modulo[]
}

model Modulo {
    id          Int         @id @default(autoincrement())
    codigo      String?     @unique
    nome        String
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    deletedAt   DateTime?
    usuarios    Usuario[]
    pai         Modulo?     @relation("Modulos", fields: [paiCodigo], references: [codigo])
    paiCodigo   String?
    modulos     Modulo[]    @relation("Modulos")
    permissoes  Permissao[]
    cargo       Cargo?      @relation(fields: [cargoCodigo], references: [codigo])
    cargoCodigo String?
}

model Permissao {
    id           Int       @id @default(autoincrement())
    codigo       String?   @unique
    nome         String
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    deletedAt    DateTime?
    usuarios     Usuario[]
    modulo       Modulo    @relation(fields: [moduloCodigo], references: [codigo])
    moduloCodigo String
}

model Token {
    id        Int       @id @default(autoincrement())
    token     String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    usuario   Usuario?  @relation(fields: [usuarioId], references: [id])
    usuarioId Int?
}

model Imobiliaria {
    id           Int     @id @default(autoincrement())
    codigo       String?
    razaoSocial  String
    nomeFantasia String?
    cnpj         String  @unique
    ie           String?
    logo         String?
    bg           String?
    email        String?
    site         String?
    telefone     String?
    cep          String?
    endereco     String?
    complemento  String?
    numero       String?
    bairro       String?
    cidade       String?
    estado       String?
    url          String?

    idInstanciaWhatsapp    String?
    tokenInstanciaWhatsapp String?

    smtpHost    String?
    smtpPort    String?
    smtpUser    String?
    smtpPass    String?
    smtpSecure  Boolean?
    smtpFrom    String?
    smtpReplyTo String?

    enviarEmail    Boolean?
    enviarWhatsapp Boolean?

    diasDownloadBoleto Int?
    emailEnvioBoleto   String?

    emailEnvioExtrato    String?
    emailAssuntoExtrato  String?
    emailMensagemExtrato String? @db.LongText

    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
    deletedAt             DateTime?
    contratos             Contrato[]
    chamados              Chamado[]
    imoveis               Imovel[]
    usuarios              Usuario[]
    conta                 Conta?                 @relation(fields: [contaId], references: [id])
    contaId               Int?
    boletos               Boleto[]
    extratos              Extrato[]
    recibos               Recibo[]
    fichasCadastrais      FichaCadastral[]
    modelosFichaCadastral ModeloFichaCadastral[]
    CategoriaPessoa       CategoriaPessoa[]
    departamentos         DepartamentoChamado[]
    TagTarefa             TagTarefa[]
    Tarefa                Tarefa[]
    Pessoa                Pessoa[]
    Orcamento             Orcamento[]
    RegraNotificacao      RegraNotificacao[]
    reguasCobranca        ReguaCobranca[]
    FilaEnvio             FilaEnvio[]
    ValidacaoFacial       ValidacaoFacial[]
    Processo              Processo[]
    ConsultaNetrin        ConsultaNetrin[]
}

enum TipoReguaCobranca {
    boleto
    extrato
}

enum TipoEnvioReguaCobranca {
    antesVencimento
    diaVencimento
}

enum FormaEnvioReguaCobranca {
    email
    whatsapp
}

model ReguaCobranca {
    id            String                  @id @default(uuid())
    tipo          TipoReguaCobranca
    tipoEnvio     TipoEnvioReguaCobranca?
    formaEnvio    FormaEnvioReguaCobranca
    dias          Int?
    assunto       String?
    conteudo      String?                 @db.LongText
    createdAt     DateTime                @default(now())
    updatedAt     DateTime?               @updatedAt
    deletedAt     DateTime?
    imobiliaria   Imobiliaria?            @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId Int?
    filas         FilaEnvio[]
}

model FilaEnvio {
    id               String        @id @default(uuid())
    previsaoEnvio    DateTime?
    dataEnvio        DateTime?
    nomeDestinatario String
    destinatario     String
    parametros       Json?
    createdAt        DateTime      @default(now())
    updatedAt        DateTime?     @updatedAt
    deletedAt        DateTime?
    reguaCobranca    ReguaCobranca @relation(fields: [reguaCobrancaId], references: [id])
    reguaCobrancaId  String
    imobiliaria      Imobiliaria?  @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId    Int?
    boleto           Boleto?       @relation(fields: [boletoId], references: [id])
    boletoId         Int?
    extrato          Extrato?      @relation(fields: [extratoId], references: [id])
    extratoId        Int?
}

model Imovel {
    id              Int                      @id @default(autoincrement())
    codigo          String?
    tipo            String?
    descricao       String?
    cep             String?
    endereco        String?
    numero          String?
    complemento     String?
    pontoReferencia String?
    bairro          String?
    cidade          String?
    estado          String?
    caracteristicas Json?
    valorVenda      Decimal?
    valorAluguel    Decimal?
    valorCondominio Decimal?
    valorIPTU       Decimal?
    valorSeguro     Decimal?
    numeroIptu      String?
    numeroAgua      String?
    numeroEnergia   String?
    quartos         Int?
    suites          Int?
    varandas        Int?
    banheiros       Int?
    cozinhas        Int?
    salas           Int?
    piscinas        Int?
    garagens        Int?
    lavabos         Int?
    terreno         Decimal?
    areaUtil        Decimal?
    areaTotal       Decimal?
    aceitaPet       Boolean?
    destaque        Boolean?
    placa           Boolean?
    mobiliado       Boolean?
    exclusividade   Boolean?
    autorizado      Boolean?
    createdAt       DateTime                 @default(now())
    updatedAt       DateTime                 @updatedAt
    deletedAt       DateTime?
    imobiliaria     Imobiliaria              @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId   Int
    proprietarios   ProprietariosOnImoveis[]
    conta           Conta?                   @relation(fields: [contaId], references: [id])
    contaId         Int?
    contrato        Contrato?                @relation(fields: [contratoId], references: [id])
    contratoId      Int?                     @unique
    FichaCadastral  FichaCadastral[]
    Tarefa          Tarefa[]
    Processo        Processo[]
}

model ProprietariosOnImoveis {
    imovel         Imovel  @relation(fields: [imovelId], references: [id])
    imovelId       Int
    proprietario   Usuario @relation(fields: [proprietarioId], references: [id])
    proprietarioId Int
    porcentagem    Float   @default(100)

    @@id([imovelId, proprietarioId])
}

model Contrato {
    id                Int           @id @default(autoincrement())
    codigo            String
    taxaAdm           Decimal?
    dataInicio        DateTime      @db.Date
    dataFim           DateTime?     @db.Date
    valorAluguel      Decimal?
    valorBonus        Decimal?
    diaVencimento     Int?
    diaRecebimento    Int?
    diaDeposito       Int?
    ultimaParcPaga    Int?
    ultimoRecebimento DateTime?     @db.Date
    ultimoBomPara     DateTime?     @db.Date
    ultimoRepasse     DateTime?     @db.Date
    formaRepasse      String?
    dataReajuste      DateTime?     @db.Date
    indiceReajuste    String?
    responsavel       String?
    multa             Decimal?
    juros             Decimal?
    formaPagamento    String?
    observacoes       String?       @db.LongText
    imobiliaria       Imobiliaria   @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId     Int
    proprietarios     Usuario[]     @relation("Proprietarios")
    inquilinos        Usuario[]     @relation("Inquilinos")
    fiadores          Usuario[]     @relation("Fiadores")
    boletos           Boleto[]
    extratos          Extrato[]
    chamados          Chamado[]
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    deletedAt         DateTime?
    anexos            Anexo[]
    conta             Conta         @relation(fields: [contaId], references: [id])
    contaId           Int
    Recibo            Recibo[]
    imovel            Imovel?
    Notificacao       Notificacao[]
    Tarefa            Tarefa[]
    Processo          Processo[]
}

model Boleto {
    id                    Int           @id @default(autoincrement())
    bols_cpf_cnpj         String
    bols_codl             String?
    envia_email           String?
    field_cod_banco       String?
    local_pgto1           String?
    local_pgto2           String?
    data_vencimen         DateTime?     @db.Date
    beneficiario          String?
    ag_cod_beneficiar     String?
    data_doc              DateTime?     @db.Date
    num_doc2              String?
    num_doc               String?
    especie_doc           String?
    aceite                String?
    data_proces           DateTime?     @db.Date
    nosso_numero2         String?
    reservado             String?
    carteira              String?
    especie2              String?
    qtd2                  String?
    xvalor                String?
    valor_doc2            String?
    instrucoes1           String?
    instrucoes2           String?
    instrucoes3           String?
    instrucoes4           String?
    instrucoes5           String?
    instrucoes6           String?
    instrucoes7           String?
    instrucoes8           String?
    instrucoes9           String?
    instrucoes10          String?
    sacado2_nome          String?
    sacado2_endereco      String?
    sacado2_city_uf_cep   String?
    linha_digitavel       String?
    barcode               String?
    desconto2             String?
    outras_deducoes2      String?
    mora_multa2           String?
    outros_acrescimos2    String?
    valorcobrado2         String?
    nao_receber_apos      String?
    email_sacado          String?
    nome_razao_sacado     String?
    endereco_sacado       String?
    numero_sacado         String?
    complemento_sacado    String?
    cep_sacado            String?
    bairro_sacado         String?
    cidade_sacado         String?
    telefone_sacado       String?
    uf_sacado             String?
    email_beneficiario    String?
    cpf_cnpj_beneficiario String?
    createdAt             DateTime      @default(now())
    updatedAt             DateTime      @updatedAt
    deletedAt             DateTime?
    contrato              Contrato      @relation(references: [id], fields: [contratoId])
    contratoId            Int
    conta                 Conta         @relation(fields: [contaId], references: [id])
    contaId               Int
    inquilino             Usuario?      @relation(fields: [imobiliariaId, bols_cpf_cnpj], references: [imobiliariaId, documento], onDelete: NoAction, onUpdate: NoAction)
    imobiliaria           Imobiliaria   @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId         Int
    Notificacao           Notificacao[]
    filaEnvio             FilaEnvio[]
}

model Recibo {
    id            Int          @id @default(autoincrement())
    parcela       Int?
    vencimento    DateTime?    @db.Date
    recebimento   DateTime?    @db.Date
    pagamento     DateTime?    @db.Date
    responsavel   String?
    total         Decimal?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    deletedAt     DateTime?
    contrato      Contrato?    @relation(references: [id], fields: [contratoId])
    contratoId    Int?
    imobiliaria   Imobiliaria? @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId Int?
    inquilino     Usuario?     @relation(fields: [inquilinoId], references: [id])
    inquilinoId   Int?
    conta         Conta?       @relation(fields: [contaId], references: [id])
    contaId       Int?
    itens         ItemRecibo[]
}

model ItemRecibo {
    id        Int       @id @default(autoincrement())
    descricao String?
    valor     Decimal?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    recibo    Recibo    @relation(fields: [reciboId], references: [id])
    reciboId  Int
}

model Extrato {
    id            Int           @id @default(autoincrement())
    parcela       Int?
    dataDeposito  DateTime?     @db.Date
    responsavel   String?
    periodo       String?
    vencimento    DateTime?     @db.Date
    observacao1   String?
    observacao2   String?
    observacao3   String?
    observacao4   String?
    observacao5   String?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    deletedAt     DateTime?
    contrato      Contrato?     @relation(references: [id], fields: [contratoId])
    contratoId    Int?
    imobiliaria   Imobiliaria?  @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId Int?
    proprietario  Usuario?      @relation(fields: [usuarioId], references: [id])
    usuarioId     Int?
    conta         Conta?        @relation(fields: [contaId], references: [id])
    contaId       Int?
    itens         ItemExtrato[]
    filaEnvio     FilaEnvio[]
}

model ItemExtrato {
    id        Int       @id @default(autoincrement())
    descricao String?
    valor     Decimal?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    extrato   Extrato   @relation(fields: [extratoId], references: [id])
    extratoId Int
}

model DepartamentoChamado {
    id            Int              @id @default(autoincrement())
    titulo        String
    ativo         Boolean          @default(true)
    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt
    deletedAt     DateTime?
    assuntos      AssuntoChamado[]
    tarefas       Tarefa[]
    integrantes   Usuario[]
    imobiliaria   Imobiliaria?     @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId Int?
}

model AssuntoChamado {
    id             Int                 @id @default(autoincrement())
    titulo         String
    ativo          Boolean             @default(true)
    departamentoId Int
    departamento   DepartamentoChamado @relation(references: [id], fields: [departamentoId])
    createdAt      DateTime            @default(now())
    updatedAt      DateTime            @updatedAt
    deletedAt      DateTime?
    chamados       Chamado[]
}

model Chamado {
    id                Int                @id @default(autoincrement())
    participantes     Usuario[]          @relation("ParticipantesChamado")
    titulo            String
    bairroImovel      String?
    cepImovel         String?
    cidadeImovel      String?
    estadoImovel      String?
    codigoImovel      String?
    codigoContrato    String?
    complementoImovel String?
    enderecoImovel    String?
    numeroImovel      String?
    assuntoId         Int
    assunto           AssuntoChamado     @relation(references: [id], fields: [assuntoId])
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    deletedAt         DateTime?
    contrato          Contrato?          @relation(fields: [contratoId], references: [id])
    contratoId        Int?
    criadorId         Int
    criador           Usuario            @relation("CriadorChamado", references: [id], fields: [criadorId])
    status            StatusChamado      @default(ABERTO)
    interacoes        InteracaoChamado[]
    anexos            Anexo[]
    imobiliaria       Imobiliaria        @relation(references: [id], fields: [imobiliariaId])
    imobiliariaId     Int
    conta             Conta              @relation(fields: [contaId], references: [id])
    contaId           Int
    conversas         ConversaChamado[]
    responsavel       Usuario?           @relation("ResponsavelChamados", fields: [responsavelId], references: [id])
    responsavelId     Int?
    historicos        HistoricoChamado[]
    Orcamento         Orcamento[]
    Tarefa            Tarefa[]
}

model HistoricoChamado {
    id        Int       @id @default(autoincrement())
    descricao String?   @db.LongText
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    usuario   Usuario?  @relation(fields: [usuarioId], references: [id])
    usuarioId Int?
    chamado   Chamado   @relation(fields: [chamadoId], references: [id])
    chamadoId Int
}

model ConversaChamado {
    id            Int                @id @default(autoincrement())
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt
    deletedAt     DateTime?
    chamado       Chamado            @relation(references: [id], fields: [chamadoId])
    chamadoId     Int
    participantes Usuario[]
    interacoes    InteracaoChamado[]
    criador       Usuario            @relation("CriadorConversa", references: [id], fields: [criadorId])
    criadorId     Int
    anexos        Anexo[]
}

model InteracaoChamado {
    id                Int              @id @default(autoincrement())
    mensagem          String?          @db.LongText
    chamadoId         Int
    chamado           Chamado          @relation(references: [id], fields: [chamadoId])
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt
    deletedAt         DateTime?
    usuario           Usuario          @relation(fields: [usuarioId], references: [id])
    usuarioId         Int
    conversa          ConversaChamado? @relation(fields: [conversaChamadoId], references: [id])
    conversaChamadoId Int?
    anexos            Anexo[]
}

model Anexo {
    id                 Int               @id @default(autoincrement())
    nome               String?
    anexo              String            @db.LongText
    createdAt          DateTime          @default(now())
    updatedAt          DateTime          @updatedAt
    deletedAt          DateTime?
    contrato           Contrato?         @relation(references: [id], fields: [contratoId])
    contratoId         Int?
    chamado            Chamado?          @relation(references: [id], fields: [chamadoId])
    chamadoId          Int?
    usuario            Usuario?          @relation("Usuario", fields: [usuarioId], references: [id])
    usuarioId          Int?
    conversa           ConversaChamado?  @relation(fields: [conversaChamadoId], references: [id])
    conversaChamadoId  Int?
    interacao          InteracaoChamado? @relation(fields: [interacaoChamadoId], references: [id])
    interacaoChamadoId Int?
    usuariosPermitidos Usuario[]         @relation("AnexosPermitidos")
    processo           Processo?         @relation(fields: [processoId], references: [id])
    processoId         String?
    fichaCadastral     FichaCadastral?   @relation(fields: [fichaCadastralId], references: [id])
    fichaCadastralId   String?
}

enum StatusChamado {
    ABERTO
    EM_ANDAMENTO
    FINALIZADO
    ARQUIVADO
}

enum TipoFicha {
    inquilino
    proprietario
    fiador
    imovel
    comprador
    vendedor
    visita
}

model ModeloFichaCadastral {
    id             String           @id @default(cuid())
    tipo           TipoFicha
    nome           String
    descricao      String?          @db.LongText
    instrucoes     String?          @db.LongText
    observacoes    String?          @db.LongText
    campos         Json?
    arquivos       Json?
    checkbox       Json?
    status         Boolean?         @default(true)
    createdAt      DateTime         @default(now())
    updatedAt      DateTime?        @updatedAt
    deletedAt      DateTime?
    imobiliaria    Imobiliaria      @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId  Int
    FichaCadastral FichaCadastral[]
}

enum StatusFicha {
    aguardando
    preenchida
    em_analise
    aprovada
    reprovada
    arquivada
    locado
    desistente
}

model FichaCadastral {
    id                       String                          @id @default(cuid())
    codigo                   Int?
    descricao                String?
    nome                     String?
    documento                String?
    email                    String?
    telefone                 String?
    codigoImovel             String?
    cepImovel                String?
    enderecoImovel           String?
    numeroImovel             String?
    complementoImovel        String?
    bairroImovel             String?
    cidadeImovel             String?
    estadoImovel             String?
    status                   StatusFicha                     @default(aguardando)
    motivoReprovacao         String?                         @db.LongText
    createdAt                DateTime                        @default(now())
    updatedAt                DateTime?                       @updatedAt
    deletedAt                DateTime?
    porcentagemPreenchimento Decimal                         @default(0)
    imobiliaria              Imobiliaria                     @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId            Int
    modelo                   ModeloFichaCadastral            @relation(fields: [modeloFichaCadastralId], references: [id])
    modeloFichaCadastralId   String
    preenchimento            FichaCadastralPreenchimento[]
    responsavel              Usuario?                        @relation(fields: [responsavelId], references: [id])
    responsavelId            Int?
    imovel                   Imovel?                         @relation(fields: [imovelId], references: [id])
    imovelId                 Int?
    importadaJb              Boolean?                        @default(false)
    ValidacaoFacial          ValidacaoFacial[]
    dataAprovacao            DateTime?
    dataReprovacao           DateTime?
    dataInicioPreenchimento  DateTime?
    dataFimPreenchimento     DateTime?
    Processo                 Processo?                       @relation(fields: [processoId], references: [id])
    processoId               String?
    observacoes              String?
    Anexo                    Anexo[]
    motivoReprovacaoFicha    MotivoReprovacaoFichaCadastral? @relation(fields: [motivoReprovacaoId], references: [id])
    motivoReprovacaoId       String?
    ConsultaNetrin           ConsultaNetrin[]
}

model MotivoReprovacaoFichaCadastral {
    id        String           @id @default(cuid())
    nome      String?
    ativo     Boolean          @default(true)
    createdAt DateTime         @default(now())
    updatedAt DateTime?        @updatedAt
    deletedAt DateTime?
    fichas    FichaCadastral[]
}

model FichaCadastralPreenchimento {
    ficha                     FichaCadastral      @relation(fields: [fichaCadastralId], references: [id])
    fichaCadastralId          String
    campo                     CampoFichaCadastral @relation(fields: [campoFichaCadastralCodigo], references: [codigo])
    campoFichaCadastralCodigo String
    valor                     String?             @db.LongText
    motivoReprovacao          String?
    aprovado                  Boolean             @default(false)
    validacaoFacial           ValidacaoFacial[]

    @@id([fichaCadastralId, campoFichaCadastralCodigo])
}

enum TipoCampo {
    cpf
    cnpj
    text
    textarea
    select
    number
    multiselect
    radio
    checkbox
    file
    files
    image
    datetime
    date
    time
    boolean
}

model CategoriaCampoFichaCadastral {
    id        String                @id @default(cuid())
    nome      String?
    descricao String?
    ordem     Int?
    createdAt DateTime              @default(now())
    updatedAt DateTime?             @updatedAt
    deletedAt DateTime?
    campos    CampoFichaCadastral[]
}

model CampoFichaCadastral {
    id                          String                        @id @default(cuid())
    tipoFicha                   TipoFicha
    tipoCampo                   TipoCampo
    codigo                      String?                       @unique
    nome                        String?
    descricao                   String?
    opcoes                      Json?
    limite                      Int?
    colSpan                     Int?
    ordem                       Int?
    mask                        String?
    cep                         Boolean                       @default(false)
    camposEndereco              Json?
    dependenciaValor            String?
    createdAt                   DateTime                      @default(now())
    updatedAt                   DateTime?                     @updatedAt
    deletedAt                   DateTime?
    categoria                   CategoriaCampoFichaCadastral? @relation(fields: [categoriaId], references: [id])
    categoriaId                 String?
    FichaCadastralPreenchimento FichaCadastralPreenchimento[]
    dependencia                 CampoFichaCadastral?          @relation("CampoDependencia", fields: [dependenciaId], references: [id])
    dependenciaId               String?
    dependencias                CampoFichaCadastral[]         @relation("CampoDependencia")

    @@unique([codigo, categoriaId])
}

enum TipoCadastroPessoa {
    prestador
}

enum TipoPessoa {
    fisica
    juridica
}

model CategoriaPessoa {
    id            String             @id @default(cuid())
    tipo          TipoCadastroPessoa
    nome          String
    createdAt     DateTime           @default(now())
    updatedAt     DateTime?          @updatedAt
    deletedAt     DateTime?
    imobiliaria   Imobiliaria        @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId Int
    Pessoa        Pessoa[]
}

model Pessoa {
    id                String              @id @default(cuid())
    tipoCadastro      TipoCadastroPessoa?
    tipoPessoa        TipoPessoa?
    razaoSocial       String?
    categoria         CategoriaPessoa?    @relation(fields: [categoriaPessoaId], references: [id])
    documento         String?
    telefone          String?
    celular           String?
    email             String?
    cep               String?
    estado            String?
    cidade            String?
    bairro            String?
    endereco          String?
    numero            String?
    complemento       String?
    observacoes       String?
    tags              String?
    createdAt         DateTime            @default(now())
    updatedAt         DateTime?           @updatedAt
    deletedAt         DateTime?
    orcamento         Orcamento[]
    categoriaPessoaId String?
    imobiliaria       Imobiliaria?        @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId     Int?
}

model Orcamento {
    id            String       @id @default(cuid())
    valor         Decimal?
    dataVisita    DateTime?
    observacoes   String?      @db.LongText
    status        String?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime?    @updatedAt
    deletedAt     DateTime?
    prestador     Pessoa?      @relation(fields: [prestadorId], references: [id])
    prestadorId   String?
    chamado       Chamado?     @relation(fields: [chamadoId], references: [id])
    chamadoId     Int?
    solicitante   Usuario      @relation(fields: [solicitanteId], references: [id])
    solicitanteId Int
    imobiliaria   Imobiliaria? @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId Int?
}

enum PrioridadeTarefa {
    Baixa
    Media
    Alta
    Urgente
}

model Tarefa {
    id                    String               @id @default(cuid())
    titulo                String?
    descricao             String?              @db.LongText
    conclusao             String?              @db.LongText
    dataVencimento        DateTime?
    prioridade            PrioridadeTarefa?
    status                String?
    dataEntrega           DateTime?
    createdAt             DateTime             @default(now())
    updatedAt             DateTime?            @updatedAt
    deletedAt             DateTime?
    responsaveis          Usuario[]            @relation("ResponsaveisTarefa")
    membros               Usuario[]            @relation("MembrosTarefa")
    departamento          DepartamentoChamado? @relation(fields: [departamentoChamadoId], references: [id])
    departamentoChamadoId Int?
    chamado               Chamado?             @relation(fields: [chamadoId], references: [id])
    chamadoId             Int?
    codigoContrato        String?
    codigoImovel          String?
    cepImovel             String?
    enderecoImovel        String?
    numeroImovel          String?
    complementoImovel     String?
    bairroImovel          String?
    cidadeImovel          String?
    estadoImovel          String?
    tags                  TagTarefa[]
    criador               Usuario?             @relation(fields: [criadorId], references: [id])
    criadorId             Int?
    imobiliaria           Imobiliaria?         @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId         Int?
    contrato              Contrato?            @relation(fields: [contratoId], references: [id])
    contratoId            Int?
    imovel                Imovel?              @relation(fields: [imovelId], references: [id])
    imovelId              Int?
}

model TagTarefa {
    id            String       @id @default(cuid())
    nome          String
    cor           String?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime?    @updatedAt
    deletedAt     DateTime?
    tarefas       Tarefa[]
    imobiliaria   Imobiliaria? @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId Int?
}

model TipoEnvioNotificacao {
    id               Int                @id @default(autoincrement())
    descricao        String
    status           Int?
    RegraNotificacao RegraNotificacao[]
    notificacao      Notificacao[]
    createdAt        DateTime           @default(now())
    updatedAt        DateTime?          @updatedAt
    deletedAt        DateTime?
}

model CanalMidia {
    id               Int                @id @default(autoincrement())
    descricao        String
    assunto          String?
    status           Int?
    notificacao      Notificacao[]
    createdAt        DateTime           @default(now())
    updatedAt        DateTime?          @updatedAt
    deletedAt        DateTime?
    RegraNotificacao RegraNotificacao[]
}

model RegraNotificacao {
    id             Int                   @id @default(autoincrement())
    imobiliaria    Imobiliaria?          @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId  Int?
    tipoEnvio      TipoEnvioNotificacao? @relation(fields: [tipoEnvioId], references: [id])
    tipoEnvioId    Int?
    canalMidia     CanalMidia?           @relation(fields: [canalMidiaId], references: [id])
    canalMidiaId   Int?
    diasReferencia Int?
    assunto        String?
    mensagem       String                @db.Text
    horaEnvio      DateTime?             @db.Time()
    createdAt      DateTime              @default(now())
    updatedAt      DateTime?             @updatedAt
    deletedAt      DateTime?
    notificacao    Notificacao[]
}

model Notificacao {
    id               String                @id @default(cuid())
    regraNotificao   RegraNotificacao?     @relation(fields: [regraNotificaoId], references: [id])
    regraNotificaoId Int?
    usuario          Usuario?              @relation(fields: [usuarioId], references: [id])
    usuarioId        Int?
    assunto          String?               @db.VarChar(90)
    mensagem         String?               @db.Text
    documento        String?               @db.LongText
    canalMidia       CanalMidia?           @relation(fields: [canalMidiaId], references: [id])
    canalMidiaId     Int?
    tipoEnvio        TipoEnvioNotificacao? @relation(fields: [tipoEnvioId], references: [id])
    tipoEnvioId      Int?
    boleto           Boleto?               @relation(fields: [boletoId], references: [id])
    boletoId         Int?
    contrato         Contrato?             @relation(fields: [contratoId], references: [id])
    contratoId       Int?
    status           Int                   @default(1)
    dataEnvio        DateTime?
    createdAt        DateTime              @default(now())
    updatedAt        DateTime?             @updatedAt
    deletedAt        DateTime?
}

model ValidacaoFacial {
    id                                                   String                       @id @default(uuid())
    imobiliariaId                                        Int?
    cpf                                                  String?                      @db.VarChar(11)
    pin                                                  String?                      @db.VarChar(50)
    resultado                                            String?                      @db.LongText
    createAt                                             DateTime?                    @default(now())
    updatedAt                                            DateTime?                    @updatedAt
    deletedAt                                            DateTime?
    status                                               Int                          @default(0)
    fotoUrl                                              String?                      @db.LongText
    ficha                                                FichaCadastral?              @relation(fields: [fichaCadastralId], references: [id])
    fichaCadastralId                                     String?
    preenchimento                                        FichaCadastralPreenchimento? @relation(fields: [fichaCadastralPreenchimentoFichaCadastralId, fichaCadastralPreenchimentoCampoFichaCadastralCodigo], references: [fichaCadastralId, campoFichaCadastralCodigo])
    fichaCadastralPreenchimentoFichaCadastralId          String?
    fichaCadastralPreenchimentoCampoFichaCadastralCodigo String?
    imobiliaria                                          Imobiliaria?                 @relation(fields: [imobiliariaId], references: [id])
}

model Historico {
    id        String    @id @default(uuid())
    tabela    String
    tabelaId  String?
    usuarioId Int?
    descricao String?
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
    deletedAt DateTime?
    usuario   Usuario?  @relation(fields: [usuarioId], references: [id])
}

enum StatusProcesso {
    EM_ANALISE
    EM_ANDAMENTO
    CANCELADO
    ARQUIVADO
    COMPLETO
    APROVADO
    REPROVADO
    LOCADO
    DESISTENTE
}

enum TipoProcesso {
    LOCACAO
    VENDA
    COMPRA
}

enum TipoGarantia {
    NENHUMA
    SEGURO
    FIADOR
    APOLICE
    CAUCAO
    PAGA
}

model Processo {
    id             String           @id @default(uuid())
    tipoProcesso   TipoProcesso     @default(LOCACAO)
    tipoGarantia   TipoGarantia     @default(NENHUMA)
    codigo         Int?
    imovelId       Int?
    contratoId     Int?
    imobiliariaId  Int?
    campos         Json?
    observacoes    String?          @db.LongText
    status         StatusProcesso   @default(EM_ANDAMENTO)
    createdAt      DateTime?        @default(now())
    updatedAt      DateTime?        @updatedAt
    deletedAt      DateTime?
    imovel         Imovel?          @relation(fields: [imovelId], references: [id])
    contrato       Contrato?        @relation(fields: [contratoId], references: [id])
    imobiliaria    Imobiliaria?     @relation(fields: [imobiliariaId], references: [id])
    fichas         FichaCadastral[]
    responsavel    Usuario?         @relation(fields: [responsavelId], references: [id])
    responsavelId  Int?
    Anexo          Anexo[]
    ConsultaNetrin ConsultaNetrin[]
}

enum TipoConsultaNetrin {
    processos_pj
    processos_pf
    protestos_pf
    protestos_pj
    cnd_federal
    cnd_estadual
    cnd_trabalhista_tst
    receita_cnpj
    receita_cnpJ_qsa
    receita_cpf
    receita_federal_cnd_cpf
    receita_federal_cnd_cnpj
    sefaz_cnd
    cnd_trabalhista
    receita_federal_cnpj
    receita_federal_cnpj_qsa
    receita_federal_cpf
    endereco_cpf
    empresas_relacionadas_cpf
    pessoas_relacionadas_cnpj
    pep_kyc_cpf
    cnd_trabalhista_cpf
    cnd_trabalhista_cnpj
}

model ConsultaNetrin {
    id           String              @id @default(uuid())
    tipoConsulta TipoConsultaNetrin?
    requisicao   Json?
    retorno      Json?
    createdAt    DateTime?           @default(now())
    updatedAt    DateTime?           @updatedAt
    deletedAt    DateTime?

    imobiliaria   Imobiliaria @relation(fields: [imobiliariaId], references: [id])
    imobiliariaId Int

    processo   Processo? @relation(fields: [processoId], references: [id])
    processoId String?

    fichaCadastral   FichaCadastral? @relation(fields: [fichaCadastralId], references: [id])
    fichaCadastralId String?
}

model Contato {
    id String @id @default(uuid())

    nome     String?
    telefone String?
    email    String?
    mensagem String?

    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
    deletedAt DateTime?
}
